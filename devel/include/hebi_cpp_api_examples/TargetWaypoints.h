// Generated by gencpp from file hebi_cpp_api_examples/TargetWaypoints.msg
// DO NOT EDIT!


#ifndef HEBI_CPP_API_EXAMPLES_MESSAGE_TARGETWAYPOINTS_H
#define HEBI_CPP_API_EXAMPLES_MESSAGE_TARGETWAYPOINTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace hebi_cpp_api_examples
{
template <class ContainerAllocator>
struct TargetWaypoints_
{
  typedef TargetWaypoints_<ContainerAllocator> Type;

  TargetWaypoints_()
    : waypoints_vector()  {
    }
  TargetWaypoints_(const ContainerAllocator& _alloc)
    : waypoints_vector(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _waypoints_vector_type;
  _waypoints_vector_type waypoints_vector;





  typedef boost::shared_ptr< ::hebi_cpp_api_examples::TargetWaypoints_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hebi_cpp_api_examples::TargetWaypoints_<ContainerAllocator> const> ConstPtr;

}; // struct TargetWaypoints_

typedef ::hebi_cpp_api_examples::TargetWaypoints_<std::allocator<void> > TargetWaypoints;

typedef boost::shared_ptr< ::hebi_cpp_api_examples::TargetWaypoints > TargetWaypointsPtr;
typedef boost::shared_ptr< ::hebi_cpp_api_examples::TargetWaypoints const> TargetWaypointsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hebi_cpp_api_examples::TargetWaypoints_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hebi_cpp_api_examples::TargetWaypoints_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hebi_cpp_api_examples

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/melodic/share/actionlib_msgs/cmake/../msg'], 'hebi_cpp_api_examples': ['/home/robot/hebi_ros_ws/devel/share/hebi_cpp_api_examples/msg', '/home/robot/hebi_ros_ws/src/hebi_cpp_api_ros_examples/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hebi_cpp_api_examples::TargetWaypoints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hebi_cpp_api_examples::TargetWaypoints_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hebi_cpp_api_examples::TargetWaypoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hebi_cpp_api_examples::TargetWaypoints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hebi_cpp_api_examples::TargetWaypoints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hebi_cpp_api_examples::TargetWaypoints_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hebi_cpp_api_examples::TargetWaypoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aa0b6e1fb814653675dd4da6b4a51d95";
  }

  static const char* value(const ::hebi_cpp_api_examples::TargetWaypoints_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaa0b6e1fb8146536ULL;
  static const uint64_t static_value2 = 0x75dd4da6b4a51d95ULL;
};

template<class ContainerAllocator>
struct DataType< ::hebi_cpp_api_examples::TargetWaypoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hebi_cpp_api_examples/TargetWaypoints";
  }

  static const char* value(const ::hebi_cpp_api_examples::TargetWaypoints_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hebi_cpp_api_examples::TargetWaypoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point[] waypoints_vector\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::hebi_cpp_api_examples::TargetWaypoints_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hebi_cpp_api_examples::TargetWaypoints_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.waypoints_vector);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TargetWaypoints_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hebi_cpp_api_examples::TargetWaypoints_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hebi_cpp_api_examples::TargetWaypoints_<ContainerAllocator>& v)
  {
    s << indent << "waypoints_vector[]" << std::endl;
    for (size_t i = 0; i < v.waypoints_vector.size(); ++i)
    {
      s << indent << "  waypoints_vector[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.waypoints_vector[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HEBI_CPP_API_EXAMPLES_MESSAGE_TARGETWAYPOINTS_H
